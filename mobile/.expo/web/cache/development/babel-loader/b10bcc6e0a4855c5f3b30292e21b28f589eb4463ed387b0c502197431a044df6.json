{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { QueryClient } from '@tanstack/react-query';\nimport { API_BASE_URL } from \"../config/api\";\nexport var queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000\n    }\n  }\n});\nexport function buildApiUrl(endpoint) {\n  if (endpoint.startsWith('http')) {\n    return endpoint;\n  }\n  var normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  return `${API_BASE_URL}${normalizedEndpoint}`;\n}\nexport function getQueryFn() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (_ref) {\n      var queryKey = _ref.queryKey;\n      var endpoint = String(queryKey[0]);\n      var url = buildApiUrl(endpoint);\n      console.log(`Making API request to: ${url}`);\n      try {\n        var fetchOptions = {\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json'\n          }\n        };\n        var res = yield fetch(url, fetchOptions);\n        if (!res.ok) {\n          if (res.status === 401 && options.on401 === 'returnNull') {\n            console.log('401 Unauthorized response handled with returnNull');\n            return null;\n          }\n          if (res.status === 404 && options.on404 === 'returnNull') {\n            console.log('404 Not Found response handled with returnNull');\n            return null;\n          }\n          var errorText = yield res.text();\n          console.error(`API error ${res.status}: ${errorText}`);\n          throw new Error(errorText || `API error ${res.status}`);\n        }\n        var contentType = res.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n          var data = yield res.json();\n          console.log('API response data:', JSON.stringify(data).substring(0, 200) + (JSON.stringify(data).length > 200 ? '...' : ''));\n          return data;\n        }\n        return null;\n      } catch (error) {\n        console.error(`API Request to ${url} failed:`, error);\n        throw error;\n      }\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\nexport function apiRequest(_x2, _x3, _x4) {\n  return _apiRequest.apply(this, arguments);\n}\nfunction _apiRequest() {\n  _apiRequest = _asyncToGenerator(function* (method, endpoint, data) {\n    var url = buildApiUrl(endpoint);\n    console.log(`Making ${method} request to: ${url}`);\n    var options = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    };\n    if (data) {\n      options.body = JSON.stringify(data);\n    }\n    try {\n      var response = yield fetch(url, options);\n      return response;\n    } catch (error) {\n      console.error(`${method} request to ${url} failed:`, error);\n      throw error;\n    }\n  });\n  return _apiRequest.apply(this, arguments);\n}","map":{"version":3,"names":["QueryClient","API_BASE_URL","queryClient","defaultOptions","queries","retry","refetchOnWindowFocus","staleTime","buildApiUrl","endpoint","startsWith","normalizedEndpoint","getQueryFn","options","arguments","length","undefined","_ref2","_asyncToGenerator","_ref","queryKey","String","url","console","log","fetchOptions","credentials","headers","res","fetch","ok","status","on401","on404","errorText","text","error","Error","contentType","get","includes","data","json","JSON","stringify","substring","_x","apply","apiRequest","_x2","_x3","_x4","_apiRequest","method","body","response"],"sources":["/home/runner/workspace/mobile/src/api/queryClient.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\nimport { API_BASE_URL } from '../config/api';\n\n// Initialize QueryClient\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      refetchOnWindowFocus: false,\n      staleTime: 5 * 60 * 1000, // 5 minutes\n    },\n  },\n});\n\n// Interface for QueryFn options\ninterface GetQueryFnOptions {\n  on401?: 'throw' | 'returnNull';\n  on404?: 'throw' | 'returnNull';\n}\n\n// Utility to build full URLs from endpoints\nexport function buildApiUrl(endpoint: string): string {\n  // If the endpoint already starts with http, assume it's a full URL\n  if (endpoint.startsWith('http')) {\n    return endpoint;\n  }\n  \n  // Make sure endpoint starts with a slash\n  const normalizedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  return `${API_BASE_URL}${normalizedEndpoint}`;\n}\n\n// Default fetcher with error handling options\nexport function getQueryFn(options: GetQueryFnOptions = {}) {\n  return async ({ queryKey }: { queryKey: readonly unknown[] }): Promise<any> => {\n    const endpoint = String(queryKey[0]);\n    const url = buildApiUrl(endpoint);\n    \n    console.log(`Making API request to: ${url}`);\n    \n    try {\n      // Set up fetch options with credentials for cookies\n      const fetchOptions: RequestInit = {\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n        },\n      };\n      \n      const res = await fetch(url, fetchOptions);\n\n      if (!res.ok) {\n        if (res.status === 401 && options.on401 === 'returnNull') {\n          console.log('401 Unauthorized response handled with returnNull');\n          return null;\n        }\n        if (res.status === 404 && options.on404 === 'returnNull') {\n          console.log('404 Not Found response handled with returnNull');\n          return null;\n        }\n        \n        const errorText = await res.text();\n        console.error(`API error ${res.status}: ${errorText}`);\n        throw new Error(errorText || `API error ${res.status}`);\n      }\n\n      // For non-JSON responses like empty responses\n      const contentType = res.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        const data = await res.json();\n        console.log('API response data:', JSON.stringify(data).substring(0, 200) + (JSON.stringify(data).length > 200 ? '...' : ''));\n        return data;\n      }\n\n      return null;\n    } catch (error) {\n      console.error(`API Request to ${url} failed:`, error);\n      throw error;\n    }\n  };\n}\n\n// Function for making API requests\nexport async function apiRequest(\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE', \n  endpoint: string, \n  data?: any\n): Promise<Response> {\n  const url = buildApiUrl(endpoint);\n  \n  console.log(`Making ${method} request to: ${url}`);\n  \n  const options: RequestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  try {\n    const response = await fetch(url, options);\n    return response;\n  } catch (error) {\n    console.error(`${method} request to ${url} failed:`, error);\n    throw error;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}