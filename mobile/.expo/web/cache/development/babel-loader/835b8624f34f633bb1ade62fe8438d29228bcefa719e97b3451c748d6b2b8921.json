{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/runner/workspace/mobile/src/context/AuthContext.tsx\",\n  _this = this;\nimport React, { createContext, useState, useEffect } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as SecureStore from \"../mocks/expo-secure-store\";\nimport { apiRequest } from \"../api/queryClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var AuthContext = createContext({});\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isLoading = _useState4[0],\n    setIsLoading = _useState4[1];\n  useEffect(function () {\n    var loadUser = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var storedUser = yield SecureStore.getItemAsync('user');\n          if (storedUser) {\n            setUser(JSON.parse(storedUser));\n          }\n          var response = yield apiRequest('GET', '/api/user');\n          if (!response.ok) {\n            if (response.status === 401) {\n              yield SecureStore.deleteItemAsync('user');\n              setUser(null);\n            }\n          } else {\n            var userData = yield response.json();\n            yield SecureStore.setItemAsync('user', JSON.stringify(userData));\n            setUser(userData);\n          }\n        } catch (error) {\n          console.error('Error loading auth state:', error);\n        } finally {\n          setIsLoading(false);\n        }\n      });\n      return function loadUser() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    loadUser();\n  }, []);\n  var signIn = function () {\n    var _ref3 = _asyncToGenerator(function* (username, password) {\n      setIsLoading(true);\n      try {\n        var response = yield apiRequest('POST', '/api/login', {\n          username: username,\n          password: password\n        });\n        if (!response.ok) {\n          var errorData = yield response.json().catch(function () {\n            return {};\n          });\n          Alert.alert('Error', errorData.message || 'Invalid credentials');\n          return false;\n        }\n        var userData = yield response.json();\n        yield SecureStore.setItemAsync('user', JSON.stringify(userData));\n        setUser(userData);\n        return true;\n      } catch (error) {\n        console.error('Login error:', error);\n        Alert.alert('Error', 'Failed to sign in. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function signIn(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var signUp = function () {\n    var _ref4 = _asyncToGenerator(function* (name, email, username, password) {\n      setIsLoading(true);\n      try {\n        if (!name || !email || !username || password.length < 6) {\n          Alert.alert('Error', 'Please fill all fields. Password must be at least 6 characters.');\n          return false;\n        }\n        var response = yield apiRequest('POST', '/api/register', {\n          name: name,\n          email: email,\n          username: username,\n          password: password\n        });\n        if (!response.ok) {\n          var errorData = yield response.json().catch(function () {\n            return {};\n          });\n          Alert.alert('Error', errorData.message || 'Registration failed');\n          return false;\n        }\n        var userData = yield response.json();\n        yield SecureStore.setItemAsync('user', JSON.stringify(userData));\n        setUser(userData);\n        return true;\n      } catch (error) {\n        console.error('Registration error:', error);\n        Alert.alert('Error', 'Failed to create account. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function signUp(_x3, _x4, _x5, _x6) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var signOut = function () {\n    var _ref5 = _asyncToGenerator(function* () {\n      try {\n        var response = yield apiRequest('POST', '/api/logout');\n        yield SecureStore.deleteItemAsync('user');\n        yield SecureStore.deleteItemAsync('token');\n        setUser(null);\n        if (!response.ok) {\n          console.warn('Logout API call failed, but local state was cleared');\n        }\n      } catch (error) {\n        console.error('Logout error:', error);\n        yield SecureStore.deleteItemAsync('user');\n        yield SecureStore.deleteItemAsync('token');\n        setUser(null);\n        Alert.alert('Warning', 'There was an issue signing out from the server, but you have been logged out locally.');\n      }\n    });\n    return function signOut() {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var forgotPassword = function () {\n    var _ref6 = _asyncToGenerator(function* (email) {\n      setIsLoading(true);\n      try {\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 1000);\n        });\n        Alert.alert('Success', 'If an account exists with that email, a password reset link has been sent.');\n        return true;\n      } catch (error) {\n        console.error('Forgot password error:', error);\n        Alert.alert('Error', 'Failed to process request. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function forgotPassword(_x7) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var resetPassword = function () {\n    var _ref7 = _asyncToGenerator(function* (token, newPassword) {\n      setIsLoading(true);\n      try {\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 1000);\n        });\n        if (newPassword.length < 6) {\n          Alert.alert('Error', 'Password must be at least 6 characters.');\n          return false;\n        }\n        Alert.alert('Success', 'Your password has been reset successfully.');\n        return true;\n      } catch (error) {\n        console.error('Reset password error:', error);\n        Alert.alert('Error', 'Failed to reset password. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function resetPassword(_x8, _x9) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var updateProfile = function () {\n    var _ref8 = _asyncToGenerator(function* (data) {\n      setIsLoading(true);\n      try {\n        if (!user) {\n          Alert.alert('Error', 'You must be logged in to update your profile.');\n          return false;\n        }\n        var response = yield apiRequest('PATCH', '/api/user/profile', data);\n        if (!response.ok) {\n          var errorData = yield response.json().catch(function () {\n            return {};\n          });\n          Alert.alert('Error', errorData.message || 'Failed to update profile');\n          return false;\n        }\n        yield refreshUser();\n        Alert.alert('Success', 'Profile updated successfully.');\n        return true;\n      } catch (error) {\n        console.error('Update profile error:', error);\n        Alert.alert('Error', 'Failed to update profile. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function updateProfile(_x10) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  var changePassword = function () {\n    var _ref9 = _asyncToGenerator(function* (currentPassword, newPassword) {\n      setIsLoading(true);\n      try {\n        if (newPassword.length < 6) {\n          Alert.alert('Error', 'New password must be at least 6 characters.');\n          return false;\n        }\n        var response = yield apiRequest('POST', '/api/user/password', {\n          currentPassword: currentPassword,\n          newPassword: newPassword\n        });\n        if (!response.ok) {\n          var errorData = yield response.json().catch(function () {\n            return {};\n          });\n          Alert.alert('Error', errorData.message || 'Failed to change password');\n          return false;\n        }\n        Alert.alert('Success', 'Password changed successfully.');\n        return true;\n      } catch (error) {\n        console.error('Change password error:', error);\n        Alert.alert('Error', 'Failed to change password. Please try again.');\n        return false;\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function changePassword(_x11, _x12) {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  var refreshUser = function () {\n    var _ref10 = _asyncToGenerator(function* () {\n      try {\n        setIsLoading(true);\n        var response = yield apiRequest('GET', '/api/user');\n        if (!response.ok) {\n          if (response.status === 401) {\n            yield SecureStore.deleteItemAsync('user');\n            yield SecureStore.deleteItemAsync('token');\n            setUser(null);\n            return;\n          }\n          throw new Error('Failed to fetch user data');\n        }\n        var userData = yield response.json();\n        yield SecureStore.setItemAsync('user', JSON.stringify(userData));\n        setUser(userData);\n      } catch (error) {\n        console.error('Refresh user error:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function refreshUser() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  return _jsxDEV(AuthContext.Provider, {\n    value: {\n      user: user,\n      isLoading: isLoading,\n      signIn: signIn,\n      signUp: signUp,\n      signOut: signOut,\n      forgotPassword: forgotPassword,\n      resetPassword: resetPassword,\n      updateProfile: updateProfile,\n      changePassword: changePassword,\n      refreshUser: refreshUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 5\n  }, _this);\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","Alert","SecureStore","apiRequest","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","user","setUser","_useState3","_useState4","isLoading","setIsLoading","loadUser","_ref2","_asyncToGenerator","storedUser","getItemAsync","JSON","parse","response","ok","status","deleteItemAsync","userData","json","setItemAsync","stringify","error","console","apply","arguments","signIn","_ref3","username","password","errorData","catch","alert","message","_x","_x2","signUp","_ref4","name","email","length","_x3","_x4","_x5","_x6","signOut","_ref5","warn","forgotPassword","_ref6","Promise","resolve","setTimeout","_x7","resetPassword","_ref7","token","newPassword","_x8","_x9","updateProfile","_ref8","data","refreshUser","_x10","changePassword","_ref9","currentPassword","_x11","_x12","_ref10","Error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_this"],"sources":["/home/runner/workspace/mobile/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { Alert } from 'react-native';\nimport * as SecureStore from '../mocks/expo-secure-store';\nimport { apiRequest } from '../api/queryClient';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  name: string;\n  organizations?: { id: number; name: string }[];\n}\n\ninterface AuthContextData {\n  user: User | null;\n  isLoading: boolean;\n  signIn: (username: string, password: string) => Promise<boolean>;\n  signUp: (name: string, email: string, username: string, password: string) => Promise<boolean>;\n  signOut: () => Promise<void>;\n  forgotPassword: (email: string) => Promise<boolean>;\n  resetPassword: (token: string, newPassword: string) => Promise<boolean>;\n  updateProfile: (data: Partial<User>) => Promise<boolean>;\n  changePassword: (currentPassword: string, newPassword: string) => Promise<boolean>;\n  refreshUser: () => Promise<void>;\n}\n\nexport const AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Load user from API on app start\n    const loadUser = async () => {\n      try {\n        // First check if we have a stored user (for faster initial load)\n        const storedUser = await SecureStore.getItemAsync('user');\n        \n        if (storedUser) {\n          // Set the stored user first for immediate UI feedback\n          setUser(JSON.parse(storedUser));\n        }\n        \n        // Then fetch the latest user data from the API\n        const response = await apiRequest('GET', '/api/user');\n        \n        if (!response.ok) {\n          // If unauthorized, clear local user data\n          if (response.status === 401) {\n            await SecureStore.deleteItemAsync('user');\n            setUser(null);\n          }\n        } else {\n          // Update with the latest user data from API\n          const userData = await response.json();\n          await SecureStore.setItemAsync('user', JSON.stringify(userData));\n          setUser(userData);\n        }\n      } catch (error) {\n        console.error('Error loading auth state:', error);\n        // Keep the stored user if there's an API error\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  const signIn = async (username: string, password: string): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest('POST', '/api/login', { username, password });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        Alert.alert('Error', errorData.message || 'Invalid credentials');\n        return false;\n      }\n      \n      const userData = await response.json();\n      \n      // Store in secure storage\n      await SecureStore.setItemAsync('user', JSON.stringify(userData));\n      // We don't need to store a token as we're using cookies\n      \n      setUser(userData);\n      return true;\n    } catch (error) {\n      console.error('Login error:', error);\n      Alert.alert('Error', 'Failed to sign in. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signUp = async (\n    name: string,\n    email: string,\n    username: string,\n    password: string\n  ): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      // Validate input\n      if (!name || !email || !username || password.length < 6) {\n        Alert.alert('Error', 'Please fill all fields. Password must be at least 6 characters.');\n        return false;\n      }\n      \n      const response = await apiRequest('POST', '/api/register', {\n        name,\n        email,\n        username,\n        password\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        Alert.alert('Error', errorData.message || 'Registration failed');\n        return false;\n      }\n      \n      const userData = await response.json();\n      \n      // Store in secure storage\n      await SecureStore.setItemAsync('user', JSON.stringify(userData));\n      // We don't need to store a token as we're using cookies\n      \n      setUser(userData);\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      Alert.alert('Error', 'Failed to create account. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signOut = async (): Promise<void> => {\n    try {\n      // Call the logout API endpoint\n      const response = await apiRequest('POST', '/api/logout');\n      \n      // Even if the API call fails, we should clean up local data\n      await SecureStore.deleteItemAsync('user');\n      await SecureStore.deleteItemAsync('token');\n      \n      setUser(null);\n      \n      if (!response.ok) {\n        console.warn('Logout API call failed, but local state was cleared');\n      }\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still clear local data even if API call fails\n      await SecureStore.deleteItemAsync('user');\n      await SecureStore.deleteItemAsync('token');\n      setUser(null);\n      \n      Alert.alert('Warning', 'There was an issue signing out from the server, but you have been logged out locally.');\n    }\n  };\n\n  const forgotPassword = async (email: string): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      // Simulate API call with a delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Always return success for demo\n      Alert.alert('Success', 'If an account exists with that email, a password reset link has been sent.');\n      return true;\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      Alert.alert('Error', 'Failed to process request. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetPassword = async (token: string, newPassword: string): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      // Simulate API call with a delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Validate password\n      if (newPassword.length < 6) {\n        Alert.alert('Error', 'Password must be at least 6 characters.');\n        return false;\n      }\n      \n      // Always return success for demo\n      Alert.alert('Success', 'Your password has been reset successfully.');\n      return true;\n    } catch (error) {\n      console.error('Reset password error:', error);\n      Alert.alert('Error', 'Failed to reset password. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const updateProfile = async (data: Partial<User>): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      if (!user) {\n        Alert.alert('Error', 'You must be logged in to update your profile.');\n        return false;\n      }\n      \n      // We'll use the /api/user/profile endpoint (assumed to exist)\n      // If such endpoint doesn't exist, we would need to create it on the backend\n      const response = await apiRequest('PATCH', '/api/user/profile', data);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        Alert.alert('Error', errorData.message || 'Failed to update profile');\n        return false;\n      }\n      \n      // Get updated user data\n      await refreshUser();\n      \n      Alert.alert('Success', 'Profile updated successfully.');\n      return true;\n    } catch (error) {\n      console.error('Update profile error:', error);\n      Alert.alert('Error', 'Failed to update profile. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const changePassword = async (currentPassword: string, newPassword: string): Promise<boolean> => {\n    setIsLoading(true);\n    try {\n      // Validate password\n      if (newPassword.length < 6) {\n        Alert.alert('Error', 'New password must be at least 6 characters.');\n        return false;\n      }\n      \n      // We'll use the /api/user/password endpoint (assumed to exist)\n      // If such endpoint doesn't exist, we would need to create it on the backend\n      const response = await apiRequest('POST', '/api/user/password', {\n        currentPassword,\n        newPassword\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        Alert.alert('Error', errorData.message || 'Failed to change password');\n        return false;\n      }\n      \n      Alert.alert('Success', 'Password changed successfully.');\n      return true;\n    } catch (error) {\n      console.error('Change password error:', error);\n      Alert.alert('Error', 'Failed to change password. Please try again.');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshUser = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      \n      // Fetch current user data from API\n      const response = await apiRequest('GET', '/api/user');\n      \n      if (!response.ok) {\n        // If unauthorized, clear local user data\n        if (response.status === 401) {\n          await SecureStore.deleteItemAsync('user');\n          await SecureStore.deleteItemAsync('token');\n          setUser(null);\n          return;\n        }\n        throw new Error('Failed to fetch user data');\n      }\n      \n      const userData = await response.json();\n      \n      // Store updated user in secure storage\n      await SecureStore.setItemAsync('user', JSON.stringify(userData));\n      \n      setUser(userData);\n    } catch (error) {\n      console.error('Refresh user error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isLoading,\n        signIn,\n        signUp,\n        signOut,\n        forgotPassword,\n        resetPassword,\n        updateProfile,\n        changePassword,\n        refreshUser,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,KAAA;AAElE,OAAO,KAAKC,WAAW;AACvB,SAASC,UAAU;AAA6B,SAAAC,MAAA,IAAAC,OAAA;AAuBhD,OAAO,IAAMC,WAAW,GAAGR,aAAa,CAAkB,CAAC,CAAoB,CAAC;AAEhF,OAAO,IAAMS,YAAqD,GAAG,SAAxDA,YAAqDA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EAC9E,IAAAC,SAAA,GAAwBX,QAAQ,CAAc,IAAI,CAAC;IAAAY,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA5CG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EACpB,IAAAI,UAAA,GAAkChB,QAAQ,CAAC,IAAI,CAAC;IAAAiB,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAzCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAE9BhB,SAAS,CAAC,YAAM;IAEd,IAAMmB,QAAQ;MAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;QAC3B,IAAI;UAEF,IAAMC,UAAU,SAASpB,WAAW,CAACqB,YAAY,CAAC,MAAM,CAAC;UAEzD,IAAID,UAAU,EAAE;YAEdR,OAAO,CAACU,IAAI,CAACC,KAAK,CAACH,UAAU,CAAC,CAAC;UACjC;UAGA,IAAMI,QAAQ,SAASvB,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC;UAErD,IAAI,CAACuB,QAAQ,CAACC,EAAE,EAAE;YAEhB,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;cAC3B,MAAM1B,WAAW,CAAC2B,eAAe,CAAC,MAAM,CAAC;cACzCf,OAAO,CAAC,IAAI,CAAC;YACf;UACF,CAAC,MAAM;YAEL,IAAMgB,QAAQ,SAASJ,QAAQ,CAACK,IAAI,CAAC,CAAC;YACtC,MAAM7B,WAAW,CAAC8B,YAAY,CAAC,MAAM,EAAER,IAAI,CAACS,SAAS,CAACH,QAAQ,CAAC,CAAC;YAChEhB,OAAO,CAACgB,QAAQ,CAAC;UACnB;QACF,CAAC,CAAC,OAAOI,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QAEnD,CAAC,SAAS;UACRhB,YAAY,CAAC,KAAK,CAAC;QACrB;MACF,CAAC;MAAA,gBA/BKC,QAAQA,CAAA;QAAA,OAAAC,KAAA,CAAAgB,KAAA,OAAAC,SAAA;MAAA;IAAA,GA+Bb;IAEDlB,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMmB,MAAM;IAAA,IAAAC,KAAA,GAAAlB,iBAAA,CAAG,WAAOmB,QAAgB,EAAEC,QAAgB,EAAuB;MAC7EvB,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,IAAMQ,QAAQ,SAASvB,UAAU,CAAC,MAAM,EAAE,YAAY,EAAE;UAAEqC,QAAQ,EAARA,QAAQ;UAAEC,QAAQ,EAARA;QAAS,CAAC,CAAC;QAE/E,IAAI,CAACf,QAAQ,CAACC,EAAE,EAAE;UAChB,IAAMe,SAAS,SAAShB,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACY,KAAK,CAAC;YAAA,OAAO,CAAC,CAAC;UAAA,CAAC,CAAC;UACzD1C,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAEF,SAAS,CAACG,OAAO,IAAI,qBAAqB,CAAC;UAChE,OAAO,KAAK;QACd;QAEA,IAAMf,QAAQ,SAASJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAGtC,MAAM7B,WAAW,CAAC8B,YAAY,CAAC,MAAM,EAAER,IAAI,CAACS,SAAS,CAACH,QAAQ,CAAC,CAAC;QAGhEhB,OAAO,CAACgB,QAAQ,CAAC;QACjB,OAAO,IAAI;MACb,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;QACpCjC,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,sCAAsC,CAAC;QAC5D,OAAO,KAAK;MACd,CAAC,SAAS;QACR1B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBA1BKoB,MAAMA,CAAAQ,EAAA,EAAAC,GAAA;MAAA,OAAAR,KAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;EAAA,GA0BX;EAED,IAAMW,MAAM;IAAA,IAAAC,KAAA,GAAA5B,iBAAA,CAAG,WACb6B,IAAY,EACZC,KAAa,EACbX,QAAgB,EAChBC,QAAgB,EACK;MACrBvB,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QAEF,IAAI,CAACgC,IAAI,IAAI,CAACC,KAAK,IAAI,CAACX,QAAQ,IAAIC,QAAQ,CAACW,MAAM,GAAG,CAAC,EAAE;UACvDnD,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,iEAAiE,CAAC;UACvF,OAAO,KAAK;QACd;QAEA,IAAMlB,QAAQ,SAASvB,UAAU,CAAC,MAAM,EAAE,eAAe,EAAE;UACzD+C,IAAI,EAAJA,IAAI;UACJC,KAAK,EAALA,KAAK;UACLX,QAAQ,EAARA,QAAQ;UACRC,QAAQ,EAARA;QACF,CAAC,CAAC;QAEF,IAAI,CAACf,QAAQ,CAACC,EAAE,EAAE;UAChB,IAAMe,SAAS,SAAShB,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACY,KAAK,CAAC;YAAA,OAAO,CAAC,CAAC;UAAA,CAAC,CAAC;UACzD1C,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAEF,SAAS,CAACG,OAAO,IAAI,qBAAqB,CAAC;UAChE,OAAO,KAAK;QACd;QAEA,IAAMf,QAAQ,SAASJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAGtC,MAAM7B,WAAW,CAAC8B,YAAY,CAAC,MAAM,EAAER,IAAI,CAACS,SAAS,CAACH,QAAQ,CAAC,CAAC;QAGhEhB,OAAO,CAACgB,QAAQ,CAAC;QACjB,OAAO,IAAI;MACb,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3CjC,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,6CAA6C,CAAC;QACnE,OAAO,KAAK;MACd,CAAC,SAAS;QACR1B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBA1CK8B,MAAMA,CAAAK,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAP,KAAA,CAAAb,KAAA,OAAAC,SAAA;IAAA;EAAA,GA0CX;EAED,IAAMoB,OAAO;IAAA,IAAAC,KAAA,GAAArC,iBAAA,CAAG,aAA2B;MACzC,IAAI;QAEF,IAAMK,QAAQ,SAASvB,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC;QAGxD,MAAMD,WAAW,CAAC2B,eAAe,CAAC,MAAM,CAAC;QACzC,MAAM3B,WAAW,CAAC2B,eAAe,CAAC,OAAO,CAAC;QAE1Cf,OAAO,CAAC,IAAI,CAAC;QAEb,IAAI,CAACY,QAAQ,CAACC,EAAE,EAAE;UAChBQ,OAAO,CAACwB,IAAI,CAAC,qDAAqD,CAAC;QACrE;MACF,CAAC,CAAC,OAAOzB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;QAErC,MAAMhC,WAAW,CAAC2B,eAAe,CAAC,MAAM,CAAC;QACzC,MAAM3B,WAAW,CAAC2B,eAAe,CAAC,OAAO,CAAC;QAC1Cf,OAAO,CAAC,IAAI,CAAC;QAEbb,KAAK,CAAC2C,KAAK,CAAC,SAAS,EAAE,uFAAuF,CAAC;MACjH;IACF,CAAC;IAAA,gBAvBKa,OAAOA,CAAA;MAAA,OAAAC,KAAA,CAAAtB,KAAA,OAAAC,SAAA;IAAA;EAAA,GAuBZ;EAED,IAAMuB,cAAc;IAAA,IAAAC,KAAA,GAAAxC,iBAAA,CAAG,WAAO8B,KAAa,EAAuB;MAChEjC,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QAEF,MAAM,IAAI4C,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC;QAAA,EAAC;QAGvD9D,KAAK,CAAC2C,KAAK,CAAC,SAAS,EAAE,4EAA4E,CAAC;QACpG,OAAO,IAAI;MACb,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CjC,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,8CAA8C,CAAC;QACpE,OAAO,KAAK;MACd,CAAC,SAAS;QACR1B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBAhBK0C,cAAcA,CAAAK,GAAA;MAAA,OAAAJ,KAAA,CAAAzB,KAAA,OAAAC,SAAA;IAAA;EAAA,GAgBnB;EAED,IAAM6B,aAAa;IAAA,IAAAC,KAAA,GAAA9C,iBAAA,CAAG,WAAO+C,KAAa,EAAEC,WAAmB,EAAuB;MACpFnD,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QAEF,MAAM,IAAI4C,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC;QAAA,EAAC;QAGvD,IAAIM,WAAW,CAACjB,MAAM,GAAG,CAAC,EAAE;UAC1BnD,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,yCAAyC,CAAC;UAC/D,OAAO,KAAK;QACd;QAGA3C,KAAK,CAAC2C,KAAK,CAAC,SAAS,EAAE,4CAA4C,CAAC;QACpE,OAAO,IAAI;MACb,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CjC,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,6CAA6C,CAAC;QACnE,OAAO,KAAK;MACd,CAAC,SAAS;QACR1B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBAtBKgD,aAAaA,CAAAI,GAAA,EAAAC,GAAA;MAAA,OAAAJ,KAAA,CAAA/B,KAAA,OAAAC,SAAA;IAAA;EAAA,GAsBlB;EAED,IAAMmC,aAAa;IAAA,IAAAC,KAAA,GAAApD,iBAAA,CAAG,WAAOqD,IAAmB,EAAuB;MACrExD,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,IAAI,CAACL,IAAI,EAAE;UACTZ,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,+CAA+C,CAAC;UACrE,OAAO,KAAK;QACd;QAIA,IAAMlB,QAAQ,SAASvB,UAAU,CAAC,OAAO,EAAE,mBAAmB,EAAEuE,IAAI,CAAC;QAErE,IAAI,CAAChD,QAAQ,CAACC,EAAE,EAAE;UAChB,IAAMe,SAAS,SAAShB,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACY,KAAK,CAAC;YAAA,OAAO,CAAC,CAAC;UAAA,CAAC,CAAC;UACzD1C,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAEF,SAAS,CAACG,OAAO,IAAI,0BAA0B,CAAC;UACrE,OAAO,KAAK;QACd;QAGA,MAAM8B,WAAW,CAAC,CAAC;QAEnB1E,KAAK,CAAC2C,KAAK,CAAC,SAAS,EAAE,+BAA+B,CAAC;QACvD,OAAO,IAAI;MACb,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CjC,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,6CAA6C,CAAC;QACnE,OAAO,KAAK;MACd,CAAC,SAAS;QACR1B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBA9BKsD,aAAaA,CAAAI,IAAA;MAAA,OAAAH,KAAA,CAAArC,KAAA,OAAAC,SAAA;IAAA;EAAA,GA8BlB;EAED,IAAMwC,cAAc;IAAA,IAAAC,KAAA,GAAAzD,iBAAA,CAAG,WAAO0D,eAAuB,EAAEV,WAAmB,EAAuB;MAC/FnD,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QAEF,IAAImD,WAAW,CAACjB,MAAM,GAAG,CAAC,EAAE;UAC1BnD,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,6CAA6C,CAAC;UACnE,OAAO,KAAK;QACd;QAIA,IAAMlB,QAAQ,SAASvB,UAAU,CAAC,MAAM,EAAE,oBAAoB,EAAE;UAC9D4E,eAAe,EAAfA,eAAe;UACfV,WAAW,EAAXA;QACF,CAAC,CAAC;QAEF,IAAI,CAAC3C,QAAQ,CAACC,EAAE,EAAE;UAChB,IAAMe,SAAS,SAAShB,QAAQ,CAACK,IAAI,CAAC,CAAC,CAACY,KAAK,CAAC;YAAA,OAAO,CAAC,CAAC;UAAA,CAAC,CAAC;UACzD1C,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAEF,SAAS,CAACG,OAAO,IAAI,2BAA2B,CAAC;UACtE,OAAO,KAAK;QACd;QAEA5C,KAAK,CAAC2C,KAAK,CAAC,SAAS,EAAE,gCAAgC,CAAC;QACxD,OAAO,IAAI;MACb,CAAC,CAAC,OAAOV,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CjC,KAAK,CAAC2C,KAAK,CAAC,OAAO,EAAE,8CAA8C,CAAC;QACpE,OAAO,KAAK;MACd,CAAC,SAAS;QACR1B,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBA/BK2D,cAAcA,CAAAG,IAAA,EAAAC,IAAA;MAAA,OAAAH,KAAA,CAAA1C,KAAA,OAAAC,SAAA;IAAA;EAAA,GA+BnB;EAED,IAAMsC,WAAW;IAAA,IAAAO,MAAA,GAAA7D,iBAAA,CAAG,aAA2B;MAC7C,IAAI;QACFH,YAAY,CAAC,IAAI,CAAC;QAGlB,IAAMQ,QAAQ,SAASvB,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC;QAErD,IAAI,CAACuB,QAAQ,CAACC,EAAE,EAAE;UAEhB,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;YAC3B,MAAM1B,WAAW,CAAC2B,eAAe,CAAC,MAAM,CAAC;YACzC,MAAM3B,WAAW,CAAC2B,eAAe,CAAC,OAAO,CAAC;YAC1Cf,OAAO,CAAC,IAAI,CAAC;YACb;UACF;UACA,MAAM,IAAIqE,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEA,IAAMrD,QAAQ,SAASJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAGtC,MAAM7B,WAAW,CAAC8B,YAAY,CAAC,MAAM,EAAER,IAAI,CAACS,SAAS,CAACH,QAAQ,CAAC,CAAC;QAEhEhB,OAAO,CAACgB,QAAQ,CAAC;MACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C,CAAC,SAAS;QACRhB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAAA,gBA7BKyD,WAAWA,CAAA;MAAA,OAAAO,MAAA,CAAA9C,KAAA,OAAAC,SAAA;IAAA;EAAA,GA6BhB;EAED,OACEhC,OAAA,CAACC,WAAW,CAAC8E,QAAQ;IACnBC,KAAK,EAAE;MACLxE,IAAI,EAAJA,IAAI;MACJI,SAAS,EAATA,SAAS;MACTqB,MAAM,EAANA,MAAM;MACNU,MAAM,EAANA,MAAM;MACNS,OAAO,EAAPA,OAAO;MACPG,cAAc,EAAdA,cAAc;MACdM,aAAa,EAAbA,aAAa;MACbM,aAAa,EAAbA,aAAa;MACbK,cAAc,EAAdA,cAAc;MACdF,WAAW,EAAXA;IACF,CAAE;IAAAlE,QAAA,EAEDA;EAAQ;IAAA6E,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACW,CAAC;AAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}