{"ast":null,"code":"import { getRandomValues } from 'crypto-browserify';\nif (typeof window !== 'undefined' && !window.crypto) {\n  window.crypto = {\n    getRandomValues: getRandomValues,\n    randomUUID: function randomUUID() {\n      var bytes = new Uint8Array(16);\n      getRandomValues(bytes);\n      bytes[6] = bytes[6] & 0x0f | 0x40;\n      bytes[8] = bytes[8] & 0x3f | 0x80;\n      var hex = Array.from(bytes).map(function (b) {\n        return b.toString(16).padStart(2, '0');\n      }).join('');\n      return [hex.substring(0, 8), hex.substring(8, 12), hex.substring(12, 16), hex.substring(16, 20), hex.substring(20, 32)].join('-');\n    }\n  };\n}\nexport default {\n  getRandomValues: getRandomValues,\n  randomUUID: function randomUUID() {\n    return window.crypto && window.crypto.randomUUID ? window.crypto.randomUUID() : null;\n  }\n};","map":{"version":3,"names":["getRandomValues","window","crypto","randomUUID","bytes","Uint8Array","hex","Array","from","map","b","toString","padStart","join","substring"],"sources":["/home/runner/workspace/mobile/src/polyfills/crypto.js"],"sourcesContent":["// Crypto polyfill for web compatibility\nimport { getRandomValues } from 'crypto-browserify';\n\n// Polyfill crypto for web\nif (typeof window !== 'undefined' && !window.crypto) {\n  window.crypto = {\n    getRandomValues,\n    // Basic implementation of randomUUID using getRandomValues\n    randomUUID: () => {\n      const bytes = new Uint8Array(16);\n      getRandomValues(bytes);\n      \n      // Set version bits\n      bytes[6] = (bytes[6] & 0x0f) | 0x40; // Version 4\n      bytes[8] = (bytes[8] & 0x3f) | 0x80; // Variant 2\n      \n      // Convert to string\n      const hex = Array.from(bytes)\n        .map(b => b.toString(16).padStart(2, '0'))\n        .join('');\n      \n      return [\n        hex.substring(0, 8),\n        hex.substring(8, 12),\n        hex.substring(12, 16),\n        hex.substring(16, 20),\n        hex.substring(20, 32)\n      ].join('-');\n    }\n  };\n}\n\n// Export for CommonJS compatibility\nexport default {\n  getRandomValues,\n  randomUUID: () => {\n    return (window.crypto && window.crypto.randomUUID) \n      ? window.crypto.randomUUID()\n      : null;\n  }\n};"],"mappings":"AACA,SAASA,eAAe,QAAQ,mBAAmB;AAGnD,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE;EACnDD,MAAM,CAACC,MAAM,GAAG;IACdF,eAAe,EAAfA,eAAe;IAEfG,UAAU,EAAE,SAAZA,UAAUA,CAAA,EAAQ;MAChB,IAAMC,KAAK,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;MAChCL,eAAe,CAACI,KAAK,CAAC;MAGtBA,KAAK,CAAC,CAAC,CAAC,GAAIA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,IAAI;MACnCA,KAAK,CAAC,CAAC,CAAC,GAAIA,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,IAAI;MAGnC,IAAME,GAAG,GAAGC,KAAK,CAACC,IAAI,CAACJ,KAAK,CAAC,CAC1BK,GAAG,CAAC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAAA,EAAC,CACzCC,IAAI,CAAC,EAAE,CAAC;MAEX,OAAO,CACLP,GAAG,CAACQ,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EACnBR,GAAG,CAACQ,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,EACpBR,GAAG,CAACQ,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EACrBR,GAAG,CAACQ,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,EACrBR,GAAG,CAACQ,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CACtB,CAACD,IAAI,CAAC,GAAG,CAAC;IACb;EACF,CAAC;AACH;AAGA,eAAe;EACbb,eAAe,EAAfA,eAAe;EACfG,UAAU,EAAE,SAAZA,UAAUA,CAAA,EAAQ;IAChB,OAAQF,MAAM,CAACC,MAAM,IAAID,MAAM,CAACC,MAAM,CAACC,UAAU,GAC7CF,MAAM,CAACC,MAAM,CAACC,UAAU,CAAC,CAAC,GAC1B,IAAI;EACV;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}