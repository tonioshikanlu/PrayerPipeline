{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toArray from \"@babel/runtime/helpers/toArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _Constants$expoConfig, _Constants$expoConfig2;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { QueryClient } from '@tanstack/react-query';\nimport Constants from 'expo-constants';\nvar API_BASE_URL = ((_Constants$expoConfig = Constants.expoConfig) == null ? void 0 : (_Constants$expoConfig2 = _Constants$expoConfig.extra) == null ? void 0 : _Constants$expoConfig2.apiUrl) || 'http://localhost:3000';\nexport var queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      staleTime: 1000 * 60 * 5\n    }\n  }\n});\nexport function apiRequest(_x, _x2, _x3, _x4) {\n  return _apiRequest.apply(this, arguments);\n}\nfunction _apiRequest() {\n  _apiRequest = _asyncToGenerator(function* (method, path, body, customHeaders) {\n    var url = `${API_BASE_URL}${path}`;\n    var headers = _objectSpread({\n      'Content-Type': 'application/json'\n    }, customHeaders);\n    var options = {\n      method: method,\n      headers: headers,\n      credentials: 'include'\n    };\n    if (body && method !== 'GET') {\n      options.body = JSON.stringify(body);\n    }\n    try {\n      var response = yield fetch(url, options);\n      if (response.status === 401) {\n        console.warn('Unauthorized request:', path);\n      }\n      return response;\n    } catch (error) {\n      console.error(`API Request Error for ${path}:`, error);\n      throw error;\n    }\n  });\n  return _apiRequest.apply(this, arguments);\n}\nexport function getQueryFn(options) {\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (_ref) {\n      var queryKey = _ref.queryKey;\n      var _queryKey = _toArray(queryKey),\n        path = _queryKey[0],\n        rest = _queryKey.slice(1);\n      var url = path;\n      if (rest.length > 0 && typeof rest[0] === 'object') {\n        var params = new URLSearchParams();\n        Object.entries(rest[0]).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 2),\n            key = _ref4[0],\n            value = _ref4[1];\n          if (value !== undefined) {\n            params.append(key, String(value));\n          }\n        });\n        var paramsString = params.toString();\n        if (paramsString) {\n          url += `?${paramsString}`;\n        }\n      }\n      var response = yield apiRequest('GET', url);\n      if (response.status === 401) {\n        if ((options == null ? void 0 : options.on401) === 'returnNull') {\n          return null;\n        }\n        throw new Error('Unauthorized');\n      }\n      if (!response.ok) {\n        var errorData = yield response.json().catch(function () {\n          return null;\n        });\n        throw new Error((errorData == null ? void 0 : errorData.message) || `Request failed with status ${response.status}`);\n      }\n      return response.json();\n    });\n    return function (_x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["QueryClient","Constants","API_BASE_URL","_Constants$expoConfig","expoConfig","_Constants$expoConfig2","extra","apiUrl","queryClient","defaultOptions","queries","retry","staleTime","apiRequest","_x","_x2","_x3","_x4","_apiRequest","apply","arguments","_asyncToGenerator","method","path","body","customHeaders","url","headers","_objectSpread","options","credentials","JSON","stringify","response","fetch","status","console","warn","error","getQueryFn","_ref2","_ref","queryKey","_queryKey","_toArray","rest","slice","length","params","URLSearchParams","Object","entries","forEach","_ref3","_ref4","_slicedToArray","key","value","undefined","append","String","paramsString","toString","on401","Error","ok","errorData","json","catch","message","_x5"],"sources":["/home/runner/workspace/mobile/src/api/queryClient.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\nimport Constants from 'expo-constants';\n\n// API base URL - get from environment or use default\nconst API_BASE_URL = Constants.expoConfig?.extra?.apiUrl || 'http://localhost:3000';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: 1,\n      staleTime: 1000 * 60 * 5, // 5 minutes\n    },\n  },\n});\n\n/**\n * Make an API request with automatic token handling\n */\nexport async function apiRequest(\n  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE',\n  path: string,\n  body?: any,\n  customHeaders?: Record<string, string>\n): Promise<Response> {\n  const url = `${API_BASE_URL}${path}`;\n  \n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n    ...customHeaders,\n  };\n  \n  const options: RequestInit = {\n    method,\n    headers,\n    credentials: 'include',\n  };\n  \n  if (body && method !== 'GET') {\n    options.body = JSON.stringify(body);\n  }\n  \n  try {\n    const response = await fetch(url, options);\n    \n    // Handle 401 Unauthorized globally\n    if (response.status === 401) {\n      // Could trigger auth flow here or let the component handle it\n      console.warn('Unauthorized request:', path);\n    }\n    \n    return response;\n  } catch (error) {\n    console.error(`API Request Error for ${path}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Default query function used by react-query\n */\nexport function getQueryFn(options?: { on401?: 'throwError' | 'returnNull' }) {\n  return async ({ queryKey }: { queryKey: string[] }) => {\n    const [path, ...rest] = queryKey;\n    \n    // If queryKey has parameters, append them to the URL\n    let url = path;\n    if (rest.length > 0 && typeof rest[0] === 'object') {\n      const params = new URLSearchParams();\n      Object.entries(rest[0]).forEach(([key, value]) => {\n        if (value !== undefined) {\n          params.append(key, String(value));\n        }\n      });\n      \n      const paramsString = params.toString();\n      if (paramsString) {\n        url += `?${paramsString}`;\n      }\n    }\n    \n    const response = await apiRequest('GET', url);\n    \n    // Handle unauthorized based on options\n    if (response.status === 401) {\n      if (options?.on401 === 'returnNull') {\n        return null;\n      }\n      throw new Error('Unauthorized');\n    }\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(\n        errorData?.message || `Request failed with status ${response.status}`\n      );\n    }\n    \n    return response.json();\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}