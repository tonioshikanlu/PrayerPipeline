{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/runner/workspace/mobile/src/navigation/NavigationContext.tsx\",\n  _this = this;\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar NavigationContext = createContext(undefined);\nexport var NavigationProvider = function NavigationProvider(_ref) {\n  var _ref$initialScreen = _ref.initialScreen,\n    initialScreen = _ref$initialScreen === void 0 ? 'Home' : _ref$initialScreen,\n    children = _ref.children;\n  var _useState = useState(initialScreen),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentScreen = _useState2[0],\n    setCurrentScreen = _useState2[1];\n  var _useState3 = useState([initialScreen]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    navigationHistory = _useState4[0],\n    setNavigationHistory = _useState4[1];\n  var _useState5 = useState({}),\n    _useState6 = _slicedToArray(_useState5, 2),\n    params = _useState6[0],\n    setParams = _useState6[1];\n  useEffect(function () {\n    setCurrentScreen(initialScreen);\n    setNavigationHistory([initialScreen]);\n    setParams({});\n  }, [initialScreen]);\n  var navigate = function navigate(screen) {\n    var newParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    setCurrentScreen(screen);\n    setParams(newParams);\n    setNavigationHistory(function (prev) {\n      return [].concat(_toConsumableArray(prev), [screen]);\n    });\n  };\n  var goBack = function goBack() {\n    if (navigationHistory.length <= 1) {\n      return;\n    }\n    var newHistory = _toConsumableArray(navigationHistory);\n    newHistory.pop();\n    var previousScreen = newHistory[newHistory.length - 1];\n    setCurrentScreen(previousScreen);\n    setNavigationHistory(newHistory);\n    setParams({});\n  };\n  return _jsxDEV(NavigationContext.Provider, {\n    value: {\n      currentScreen: currentScreen,\n      navigate: navigate,\n      goBack: goBack,\n      navigationHistory: navigationHistory,\n      params: params\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, _this);\n};\nexport var useNavigation = function useNavigation() {\n  var context = useContext(NavigationContext);\n  if (context === undefined) {\n    throw new Error('useNavigation must be used within a NavigationProvider');\n  }\n  return context;\n};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","NavigationContext","undefined","NavigationProvider","_ref","_ref$initialScreen","initialScreen","children","_useState","_useState2","_slicedToArray","currentScreen","setCurrentScreen","_useState3","_useState4","navigationHistory","setNavigationHistory","_useState5","_useState6","params","setParams","navigate","screen","newParams","arguments","length","prev","concat","_toConsumableArray","goBack","newHistory","pop","previousScreen","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_this","useNavigation","context","Error"],"sources":["/home/runner/workspace/mobile/src/navigation/NavigationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\ninterface NavigationContextType {\n  currentScreen: string;\n  navigate: (screen: string, params?: Record<string, any>) => void;\n  goBack: () => void;\n  navigationHistory: string[];\n  params: Record<string, any>;\n}\n\nconst NavigationContext = createContext<NavigationContextType | undefined>(undefined);\n\ninterface NavigationProviderProps {\n  initialScreen?: string;\n  children: React.ReactNode;\n}\n\nexport const NavigationProvider: React.FC<NavigationProviderProps> = ({ \n  initialScreen = 'Home',\n  children \n}) => {\n  const [currentScreen, setCurrentScreen] = useState(initialScreen);\n  const [navigationHistory, setNavigationHistory] = useState<string[]>([initialScreen]);\n  const [params, setParams] = useState<Record<string, any>>({});\n  \n  // Reset history when initial screen changes (useful for auth state changes)\n  useEffect(() => {\n    setCurrentScreen(initialScreen);\n    setNavigationHistory([initialScreen]);\n    setParams({});\n  }, [initialScreen]);\n\n  const navigate = (screen: string, newParams: Record<string, any> = {}) => {\n    setCurrentScreen(screen);\n    setParams(newParams);\n    \n    // Add to navigation history\n    setNavigationHistory(prev => [...prev, screen]);\n  };\n\n  const goBack = () => {\n    if (navigationHistory.length <= 1) {\n      return; // Can't go back if there's only one screen in history\n    }\n    \n    // Remove current screen from history\n    const newHistory = [...navigationHistory];\n    newHistory.pop(); // Remove current screen\n    \n    // Get the previous screen\n    const previousScreen = newHistory[newHistory.length - 1];\n    \n    setCurrentScreen(previousScreen);\n    setNavigationHistory(newHistory);\n    setParams({}); // Reset params when going back\n  };\n\n  return (\n    <NavigationContext.Provider\n      value={{\n        currentScreen,\n        navigate,\n        goBack,\n        navigationHistory,\n        params\n      }}\n    >\n      {children}\n    </NavigationContext.Provider>\n  );\n};\n\nexport const useNavigation = () => {\n  const context = useContext(NavigationContext);\n  if (context === undefined) {\n    throw new Error('useNavigation must be used within a NavigationProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}