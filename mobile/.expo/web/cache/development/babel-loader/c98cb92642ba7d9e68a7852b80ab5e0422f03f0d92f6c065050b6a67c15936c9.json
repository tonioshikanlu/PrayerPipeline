{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _jsxFileName = \"/home/runner/workspace/mobile/src/context/AuthContext.tsx\";\nimport React, { createContext } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { insertUserSchema } from \"../shared/schema\";\nimport { z } from 'zod';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { apiRequest, getQueryFn, queryClient } from \"../api/queryClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var AuthContext = createContext(null);\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useQuery = useQuery({\n      queryKey: ['/api/user'],\n      queryFn: getQueryFn({\n        on401: 'returnNull'\n      })\n    }),\n    user = _useQuery.data,\n    error = _useQuery.error,\n    isLoading = _useQuery.isLoading;\n  var loginMutation = useLoginMutation();\n  var registerMutation = useRegisterMutation();\n  var logoutMutation = useLogoutMutation();\n  return _jsxDEV(AuthContext.Provider, {\n    value: {\n      user: user,\n      isLoading: isLoading,\n      error: error,\n      loginMutation: loginMutation,\n      registerMutation: registerMutation,\n      logoutMutation: logoutMutation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\nfunction useLoginMutation() {\n  return useMutation({\n    mutationFn: function () {\n      var _mutationFn = _asyncToGenerator(function* (credentials) {\n        var response = yield apiRequest('POST', '/api/login', credentials);\n        if (!response.ok) {\n          var errorData = yield response.json().catch(function () {\n            return {};\n          });\n          throw new Error(errorData.message || 'Login failed');\n        }\n        return response.json();\n      });\n      function mutationFn(_x) {\n        return _mutationFn.apply(this, arguments);\n      }\n      return mutationFn;\n    }(),\n    onSuccess: function onSuccess(user) {\n      queryClient.setQueryData(['/api/user'], user);\n    },\n    onError: function onError(error) {\n      Alert.alert('Login Failed', error.message);\n    }\n  });\n}\nfunction useRegisterMutation() {\n  var registerSchema = insertUserSchema.extend({\n    password: z.string().min(8, 'Password must be at least 8 characters')\n  });\n  return useMutation({\n    mutationFn: function () {\n      var _mutationFn2 = _asyncToGenerator(function* (credentials) {\n        registerSchema.parse(credentials);\n        var response = yield apiRequest('POST', '/api/register', credentials);\n        if (!response.ok) {\n          var errorData = yield response.json().catch(function () {\n            return {};\n          });\n          throw new Error(errorData.message || 'Registration failed');\n        }\n        return response.json();\n      });\n      function mutationFn(_x2) {\n        return _mutationFn2.apply(this, arguments);\n      }\n      return mutationFn;\n    }(),\n    onSuccess: function onSuccess(user) {\n      queryClient.setQueryData(['/api/user'], user);\n    },\n    onError: function onError(error) {\n      Alert.alert('Registration Failed', error.message);\n    }\n  });\n}\nfunction useLogoutMutation() {\n  return useMutation({\n    mutationFn: function () {\n      var _mutationFn3 = _asyncToGenerator(function* () {\n        var response = yield apiRequest('POST', '/api/logout');\n        if (!response.ok) {\n          throw new Error('Logout failed');\n        }\n      });\n      function mutationFn() {\n        return _mutationFn3.apply(this, arguments);\n      }\n      return mutationFn;\n    }(),\n    onSuccess: function onSuccess() {\n      queryClient.setQueryData(['/api/user'], null);\n      queryClient.invalidateQueries();\n    },\n    onError: function onError(error) {\n      Alert.alert('Logout Failed', error.message);\n    }\n  });\n}","map":{"version":3,"names":["React","createContext","useMutation","useQuery","insertUserSchema","z","Alert","apiRequest","getQueryFn","queryClient","jsxDEV","_jsxDEV","AuthContext","AuthProvider","_ref","children","_useQuery","queryKey","queryFn","on401","user","data","error","isLoading","loginMutation","useLoginMutation","registerMutation","useRegisterMutation","logoutMutation","useLogoutMutation","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","mutationFn","_mutationFn","_asyncToGenerator","credentials","response","ok","errorData","json","catch","Error","message","_x","apply","arguments","onSuccess","setQueryData","onError","alert","registerSchema","extend","password","string","min","_mutationFn2","parse","_x2","_mutationFn3","invalidateQueries"],"sources":["/home/runner/workspace/mobile/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, ReactNode } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { User, insertUserSchema, LoginData, RegisterData } from '../shared/schema';\nimport { z } from 'zod';\nimport * as SecureStore from '../mocks/expo-secure-store';\nimport { Alert } from 'react-native';\nimport { apiRequest, getQueryFn, queryClient } from '../api/queryClient';\n\ntype AuthContextType = {\n  user: User | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: ReturnType<typeof useLoginMutation>;\n  registerMutation: ReturnType<typeof useRegisterMutation>;\n  logoutMutation: ReturnType<typeof useLogoutMutation>;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  // Use query to fetch the current user if already authenticated\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery({\n    queryKey: ['/api/user'],\n    queryFn: getQueryFn({ on401: 'returnNull' }) as any,\n  });\n\n  const loginMutation = useLoginMutation();\n  const registerMutation = useRegisterMutation();\n  const logoutMutation = useLogoutMutation();\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user as User | null,\n        isLoading,\n        error: error as Error | null,\n        loginMutation,\n        registerMutation,\n        logoutMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n// Login mutation\nfunction useLoginMutation() {\n  return useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const response = await apiRequest('POST', '/api/login', credentials);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData(['/api/user'], user);\n    },\n    onError: (error: Error) => {\n      Alert.alert('Login Failed', error.message);\n    },\n  });\n}\n\n// Register mutation\nfunction useRegisterMutation() {\n  const registerSchema = insertUserSchema.extend({\n    password: z.string().min(8, 'Password must be at least 8 characters'),\n  });\n  \n  return useMutation({\n    mutationFn: async (credentials: RegisterData) => {\n      // Validate with Zod schema\n      registerSchema.parse(credentials);\n      \n      const response = await apiRequest('POST', '/api/register', credentials);\n      \n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (user: User) => {\n      queryClient.setQueryData(['/api/user'], user);\n    },\n    onError: (error: Error) => {\n      Alert.alert('Registration Failed', error.message);\n    },\n  });\n}\n\n// Logout mutation\nfunction useLogoutMutation() {\n  return useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/logout');\n      if (!response.ok) {\n        throw new Error('Logout failed');\n      }\n    },\n    onSuccess: () => {\n      queryClient.setQueryData(['/api/user'], null);\n      // Invalidate all queries to refresh data\n      queryClient.invalidateQueries();\n    },\n    onError: (error: Error) => {\n      Alert.alert('Logout Failed', error.message);\n    },\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}