{"ast":null,"code":"import { z } from 'zod';\nexport var insertUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  role: z.string().default(\"regular\"),\n  phone: z.string().optional(),\n  avatar: z.string().optional(),\n  bio: z.string().optional()\n});\nexport var loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\")\n});\nexport var registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Please confirm your password\")\n}).refine(function (data) {\n  return data.password === data.confirmPassword;\n}, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"]\n});\nexport var forgotPasswordSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\")\n});\nexport var resetPasswordSchema = z.object({\n  token: z.string().min(1, \"Token is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\")\n}).refine(function (data) {\n  return data.password === data.confirmPassword;\n}, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"]\n});\nexport var changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your new password\")\n}).refine(function (data) {\n  return data.newPassword === data.confirmPassword;\n}, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"]\n});","map":{"version":3,"names":["z","insertUserSchema","object","username","string","min","password","name","email","role","default","phone","optional","avatar","bio","loginSchema","registerSchema","extend","confirmPassword","refine","data","message","path","forgotPasswordSchema","resetPasswordSchema","token","changePasswordSchema","currentPassword","newPassword"],"sources":["/home/runner/workspace/mobile/src/shared/schema.ts"],"sourcesContent":["import { z } from 'zod';\n\n// Types mirroring the backend schema\nexport interface User {\n  id: number;\n  username: string;\n  name: string;\n  email: string;\n  role: string;\n  phone?: string;\n  avatar?: string;\n  bio?: string;\n}\n\n// Zod schemas\nexport const insertUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(1, \"Name is required\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  role: z.string().default(\"regular\"),\n  phone: z.string().optional(),\n  avatar: z.string().optional(),\n  bio: z.string().optional(),\n});\n\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\n\nexport const registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type RegisterData = z.infer<typeof registerSchema>;\n\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n});\n\nexport type ForgotPasswordData = z.infer<typeof forgotPasswordSchema>;\n\nexport const resetPasswordSchema = z.object({\n  token: z.string().min(1, \"Token is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type ResetPasswordData = z.infer<typeof resetPasswordSchema>;\n\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(6, \"New password must be at least 6 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your new password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords do not match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type ChangePasswordData = z.infer<typeof changePasswordSchema>;\n\nexport interface Organization {\n  id: number;\n  name: string;\n  description?: string;\n  website?: string;\n  memberCount: number;\n  isAdmin: boolean;\n  joinedAt: string;\n}\n\nexport interface OrganizationInvite {\n  id: number;\n  organizationId: number;\n  organizationName: string;\n  invitedByName: string;\n  invitedAt: string;\n  status: string;\n}\n\nexport interface Group {\n  id: number;\n  name: string;\n  description?: string;\n  organizationId: number;\n  organizationName: string;\n  category: string;\n  privacy: string;\n  memberCount: number;\n  requestCount: number;\n  isLeader: boolean;\n  isMember: boolean;\n  createdAt: string;\n}\n\nexport interface PrayerRequest {\n  id: number;\n  groupId: number;\n  groupName: string;\n  userId: number;\n  userName: string;\n  isOwnRequest: boolean;\n  title: string;\n  description: string;\n  urgency: string;\n  isAnonymous: boolean;\n  status: string;\n  followUpDate?: string;\n  commentCount: number;\n  prayingCount: number;\n  hasPrayed: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Comment {\n  id: number;\n  prayerRequestId: number;\n  userId: number;\n  userName: string;\n  userAvatar?: string;\n  isOwnComment: boolean;\n  text: string;\n  isPrivate: boolean;\n  createdAt: string;\n}\n\nexport interface Notification {\n  id: number;\n  type: string;\n  message: string;\n  read: boolean;\n  referenceId?: number;\n  referenceType?: string;\n  referenceUrl?: string;\n  createdAt: string;\n}\n\nexport interface Meeting {\n  id: number;\n  groupId: number;\n  groupName: string;\n  title: string;\n  description?: string;\n  meetingType: string;\n  meetingLink: string;\n  startTime: string;\n  endTime?: string;\n  isRecurring: boolean;\n  recurringPattern?: string;\n  recurringDay?: number;\n  recurringUntil?: string;\n  createdBy: number;\n  createdByName: string;\n  isCreator: boolean;\n  createdAt: string;\n}\n\nexport interface MeetingNote {\n  id: number;\n  meetingId: number;\n  content: string;\n  summary?: string;\n  createdAt: string;\n  isAiGenerated: boolean;\n}\n\nexport interface PushTokenRegistration {\n  token: string;\n  deviceType: 'ios' | 'android' | 'web';\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}