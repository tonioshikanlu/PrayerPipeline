{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { QueryClient } from '@tanstack/react-query';\nexport var queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5,\n      retry: 1\n    }\n  }\n});\nexport function getQueryFn() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return function () {\n    var _ref2 = _asyncToGenerator(function* (_ref) {\n      var queryKey = _ref.queryKey;\n      var url = String(queryKey[0]);\n      var res = yield fetch(url);\n      if (!res.ok) {\n        if (res.status === 401 && options.on401 === 'returnNull') {\n          return null;\n        }\n        if (res.status === 404 && options.on404 === 'returnNull') {\n          return null;\n        }\n        var errorText = yield res.text();\n        throw new Error(errorText || `API error ${res.status}`);\n      }\n      var contentType = res.headers.get('content-type');\n      if (contentType && contentType.includes('application/json')) {\n        return res.json();\n      }\n      return null;\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\nexport function apiRequest(_x2, _x3, _x4) {\n  return _apiRequest.apply(this, arguments);\n}\nfunction _apiRequest() {\n  _apiRequest = _asyncToGenerator(function* (method, url, data) {\n    var options = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    };\n    if (data) {\n      options.body = JSON.stringify(data);\n    }\n    var response = yield fetch(url, options);\n    return response;\n  });\n  return _apiRequest.apply(this, arguments);\n}","map":{"version":3,"names":["QueryClient","queryClient","defaultOptions","queries","staleTime","retry","getQueryFn","options","arguments","length","undefined","_ref2","_asyncToGenerator","_ref","queryKey","url","String","res","fetch","ok","status","on401","on404","errorText","text","Error","contentType","headers","get","includes","json","_x","apply","apiRequest","_x2","_x3","_x4","_apiRequest","method","data","credentials","body","JSON","stringify","response"],"sources":["/home/runner/workspace/mobile/src/api/queryClient.ts"],"sourcesContent":["import { QueryClient } from '@tanstack/react-query';\n\n// Create a client\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 1,\n    },\n  },\n});\n\ninterface GetQueryFnOptions {\n  on401?: 'throw' | 'returnNull';\n  on404?: 'throw' | 'returnNull';\n}\n\n// Default fetcher with error handling options\nexport function getQueryFn(options: GetQueryFnOptions = {}) {\n  return async ({ queryKey }: { queryKey: readonly unknown[] }): Promise<any> => {\n    const url = String(queryKey[0]);\n    const res = await fetch(url);\n\n    if (!res.ok) {\n      if (res.status === 401 && options.on401 === 'returnNull') {\n        return null;\n      }\n      if (res.status === 404 && options.on404 === 'returnNull') {\n        return null;\n      }\n      \n      const errorText = await res.text();\n      throw new Error(errorText || `API error ${res.status}`);\n    }\n\n    // For non-JSON responses like empty responses\n    const contentType = res.headers.get('content-type');\n    if (contentType && contentType.includes('application/json')) {\n      return res.json();\n    }\n\n    return null;\n  };\n}\n\n// Function for making API requests\nexport async function apiRequest(\n  method: 'GET' | 'POST' | 'PATCH' | 'DELETE', \n  url: string, \n  data?: any\n): Promise<Response> {\n  const options: RequestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include',\n  };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  const response = await fetch(url, options);\n  return response;\n}"],"mappings":";AAAA,SAASA,WAAW,QAAQ,uBAAuB;AAGnD,OAAO,IAAMC,WAAW,GAAG,IAAID,WAAW,CAAC;EACzCE,cAAc,EAAE;IACdC,OAAO,EAAE;MACPC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;MACxBC,KAAK,EAAE;IACT;EACF;AACF,CAAC,CAAC;AAQF,OAAO,SAASC,UAAUA,CAAA,EAAkC;EAAA,IAAjCC,OAA0B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACxD;IAAA,IAAAG,KAAA,GAAAC,iBAAA,CAAO,WAAAC,IAAA,EAAwE;MAAA,IAA/DC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;MACtB,IAAMC,GAAG,GAAGC,MAAM,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC/B,IAAMG,GAAG,SAASC,KAAK,CAACH,GAAG,CAAC;MAE5B,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE;QACX,IAAIF,GAAG,CAACG,MAAM,KAAK,GAAG,IAAIb,OAAO,CAACc,KAAK,KAAK,YAAY,EAAE;UACxD,OAAO,IAAI;QACb;QACA,IAAIJ,GAAG,CAACG,MAAM,KAAK,GAAG,IAAIb,OAAO,CAACe,KAAK,KAAK,YAAY,EAAE;UACxD,OAAO,IAAI;QACb;QAEA,IAAMC,SAAS,SAASN,GAAG,CAACO,IAAI,CAAC,CAAC;QAClC,MAAM,IAAIC,KAAK,CAACF,SAAS,IAAI,aAAaN,GAAG,CAACG,MAAM,EAAE,CAAC;MACzD;MAGA,IAAMM,WAAW,GAAGT,GAAG,CAACU,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MACnD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC3D,OAAOZ,GAAG,CAACa,IAAI,CAAC,CAAC;MACnB;MAEA,OAAO,IAAI;IACb,CAAC;IAAA,iBAAAC,EAAA;MAAA,OAAApB,KAAA,CAAAqB,KAAA,OAAAxB,SAAA;IAAA;EAAA;AACH;AAGA,gBAAsByB,UAAUA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,WAAA,CAAAL,KAAA,OAAAxB,SAAA;AAAA;AAmB/B,SAAA6B,YAAA;EAAAA,WAAA,GAAAzB,iBAAA,CAnBM,WACL0B,MAA2C,EAC3CvB,GAAW,EACXwB,IAAU,EACS;IACnB,IAAMhC,OAAoB,GAAG;MAC3B+B,MAAM,EAANA,MAAM;MACNX,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDa,WAAW,EAAE;IACf,CAAC;IAED,IAAID,IAAI,EAAE;MACRhC,OAAO,CAACkC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;IACrC;IAEA,IAAMK,QAAQ,SAAS1B,KAAK,CAACH,GAAG,EAAER,OAAO,CAAC;IAC1C,OAAOqC,QAAQ;EACjB,CAAC;EAAA,OAAAP,WAAA,CAAAL,KAAA,OAAAxB,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}