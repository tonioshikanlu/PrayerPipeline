{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/runner/workspace/mobile/src/context/NotificationContext.tsx\";\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useRef } from 'react';\nimport { registerForPushNotifications, setupNotificationListeners, unregisterFromPushNotifications } from \"../services/notificationService\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar NotificationContext = createContext(null);\nexport function NotificationProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    expoPushToken = _useState2[0],\n    setExpoPushToken = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notification = _useState4[0],\n    setNotification = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isNotificationsEnabled = _useState6[0],\n    setIsNotificationsEnabled = _useState6[1];\n  var _useAuth = useAuth(),\n    user = _useAuth.user;\n  var notificationListenerCleanup = useRef(null);\n  useEffect(function () {\n    var isMounted = true;\n    var registerForNotifications = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        if (user) {\n          var token = yield registerForPushNotifications();\n          if (isMounted && token) {\n            setExpoPushToken(token);\n            setIsNotificationsEnabled(true);\n          }\n        } else {\n          if (expoPushToken) {\n            yield unregisterFromPushNotifications(expoPushToken);\n          }\n          if (isMounted) {\n            setExpoPushToken(null);\n            setIsNotificationsEnabled(false);\n          }\n        }\n      });\n      return function registerForNotifications() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    registerForNotifications();\n    return function () {\n      isMounted = false;\n    };\n  }, [user]);\n  useEffect(function () {\n    notificationListenerCleanup.current = setupNotificationListeners(function (notification) {\n      setNotification(notification);\n    });\n    return function () {\n      if (notificationListenerCleanup.current) {\n        notificationListenerCleanup.current();\n      }\n    };\n  }, []);\n  var enableNotifications = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!user) return false;\n      try {\n        var token = yield registerForPushNotifications();\n        if (token) {\n          setExpoPushToken(token);\n          setIsNotificationsEnabled(true);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Failed to enable notifications:', error);\n        return false;\n      }\n    });\n    return function enableNotifications() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var disableNotifications = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      if (!expoPushToken) return true;\n      try {\n        var success = yield unregisterFromPushNotifications(expoPushToken);\n        if (success) {\n          setExpoPushToken(null);\n          setIsNotificationsEnabled(false);\n        }\n        return success;\n      } catch (error) {\n        console.error('Failed to disable notifications:', error);\n        return false;\n      }\n    });\n    return function disableNotifications() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsxDEV(NotificationContext.Provider, {\n    value: {\n      pushToken: expoPushToken,\n      expoPushToken: expoPushToken,\n      notification: notification,\n      setNotification: setNotification,\n      isNotificationsEnabled: isNotificationsEnabled,\n      enableNotifications: enableNotifications,\n      disableNotifications: disableNotifications\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\nexport function useNotifications() {\n  var context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useRef","registerForPushNotifications","setupNotificationListeners","unregisterFromPushNotifications","useAuth","jsxDEV","_jsxDEV","NotificationContext","NotificationProvider","_ref","children","_useState","_useState2","_slicedToArray","expoPushToken","setExpoPushToken","_useState3","_useState4","notification","setNotification","_useState5","_useState6","isNotificationsEnabled","setIsNotificationsEnabled","_useAuth","user","notificationListenerCleanup","isMounted","registerForNotifications","_ref2","_asyncToGenerator","token","apply","arguments","current","enableNotifications","_ref3","error","console","disableNotifications","_ref4","success","Provider","value","pushToken","fileName","_jsxFileName","lineNumber","columnNumber","useNotifications","context","Error"],"sources":["/home/runner/workspace/mobile/src/context/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, ReactNode, useContext, useEffect, useState } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport { useRef } from 'react';\nimport { Platform } from 'react-native';\nimport {\n  registerForPushNotifications,\n  setupNotificationListeners,\n  unregisterFromPushNotifications,\n} from '@/services/notificationService';\nimport { useAuth } from '@/hooks/useAuth';\n\ntype NotificationContextType = {\n  pushToken: string | null;\n  expoPushToken: string | null;\n  notification: Notifications.Notification | null;\n  setNotification: React.Dispatch<React.SetStateAction<Notifications.Notification | null>>;\n  isNotificationsEnabled: boolean;\n  enableNotifications: () => Promise<boolean>;\n  disableNotifications: () => Promise<boolean>;\n};\n\nconst NotificationContext = createContext<NotificationContextType | null>(null);\n\nexport function NotificationProvider({ children }: { children: ReactNode }) {\n  const [expoPushToken, setExpoPushToken] = useState<string | null>(null);\n  const [notification, setNotification] = useState<Notifications.Notification | null>(null);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState<boolean>(false);\n  \n  // Get the auth context to check if user is logged in\n  const { user } = useAuth();\n  \n  // Reference to notification listener cleanup function\n  const notificationListenerCleanup = useRef<(() => void) | null>(null);\n  \n  // Register for push notifications when the user logs in\n  useEffect(() => {\n    let isMounted = true;\n    \n    const registerForNotifications = async () => {\n      if (user) {\n        // Register device for push notifications\n        const token = await registerForPushNotifications();\n        if (isMounted && token) {\n          setExpoPushToken(token);\n          setIsNotificationsEnabled(true);\n        }\n      } else {\n        // Clear token when user logs out\n        if (expoPushToken) {\n          await unregisterFromPushNotifications(expoPushToken);\n        }\n        if (isMounted) {\n          setExpoPushToken(null);\n          setIsNotificationsEnabled(false);\n        }\n      }\n    };\n    \n    registerForNotifications();\n    \n    return () => {\n      isMounted = false;\n    };\n  }, [user]);\n  \n  // Setup notification listeners\n  useEffect(() => {\n    // Set up notification listeners when component mounts\n    notificationListenerCleanup.current = setupNotificationListeners(\n      (notification) => {\n        setNotification(notification);\n      }\n    );\n    \n    // Clean up listeners when component unmounts\n    return () => {\n      if (notificationListenerCleanup.current) {\n        notificationListenerCleanup.current();\n      }\n    };\n  }, []);\n  \n  // Enable notifications\n  const enableNotifications = async (): Promise<boolean> => {\n    if (!user) return false;\n    \n    try {\n      const token = await registerForPushNotifications();\n      if (token) {\n        setExpoPushToken(token);\n        setIsNotificationsEnabled(true);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Failed to enable notifications:', error);\n      return false;\n    }\n  };\n  \n  // Disable notifications\n  const disableNotifications = async (): Promise<boolean> => {\n    if (!expoPushToken) return true;\n    \n    try {\n      const success = await unregisterFromPushNotifications(expoPushToken);\n      if (success) {\n        setExpoPushToken(null);\n        setIsNotificationsEnabled(false);\n      }\n      return success;\n    } catch (error) {\n      console.error('Failed to disable notifications:', error);\n      return false;\n    }\n  };\n  \n  return (\n    <NotificationContext.Provider\n      value={{\n        pushToken: expoPushToken,\n        expoPushToken,\n        notification,\n        setNotification,\n        isNotificationsEnabled,\n        enableNotifications,\n        disableNotifications,\n      }}\n    >\n      {children}\n    </NotificationContext.Provider>\n  );\n}\n\n// Custom hook to use the notification context\nexport function useNotifications() {\n  const context = useContext(NotificationContext);\n  \n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  \n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}