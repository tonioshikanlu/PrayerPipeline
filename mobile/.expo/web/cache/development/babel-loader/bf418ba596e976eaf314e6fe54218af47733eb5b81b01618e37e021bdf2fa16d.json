{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { apiRequest } from \"../api/queryClient\";\nvar isBrowser = Platform.OS === 'web';\nexport function requestNotificationPermission() {\n  return _requestNotificationPermission.apply(this, arguments);\n}\nfunction _requestNotificationPermission() {\n  _requestNotificationPermission = _asyncToGenerator(function* () {\n    if (isBrowser) {\n      if (!('Notification' in window)) {\n        console.log('This browser does not support notifications');\n        return false;\n      }\n      try {\n        var permission = yield Notification.requestPermission();\n        return permission === 'granted';\n      } catch (error) {\n        console.error('Error requesting notification permission:', error);\n        return false;\n      }\n    } else {\n      console.log('Mobile notification permissions would be requested here');\n      return true;\n    }\n  });\n  return _requestNotificationPermission.apply(this, arguments);\n}\nexport function registerPushToken(_x) {\n  return _registerPushToken.apply(this, arguments);\n}\nfunction _registerPushToken() {\n  _registerPushToken = _asyncToGenerator(function* (token) {\n    try {\n      var deviceType = isBrowser ? 'web' : Platform.OS === 'ios' ? 'ios' : 'android';\n      var tokenRegistration = {\n        token: token,\n        deviceType: deviceType\n      };\n      var response = yield apiRequest('POST', '/api/notifications/register-token', tokenRegistration);\n      return response.ok;\n    } catch (error) {\n      console.error('Error registering push token:', error);\n      return false;\n    }\n  });\n  return _registerPushToken.apply(this, arguments);\n}\nexport function unregisterPushToken(_x2) {\n  return _unregisterPushToken.apply(this, arguments);\n}\nfunction _unregisterPushToken() {\n  _unregisterPushToken = _asyncToGenerator(function* (token) {\n    try {\n      var response = yield apiRequest('POST', '/api/notifications/unregister-token', {\n        token: token\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Error unregistering push token:', error);\n      return false;\n    }\n  });\n  return _unregisterPushToken.apply(this, arguments);\n}\nexport function getVapidPublicKey() {\n  return _getVapidPublicKey.apply(this, arguments);\n}\nfunction _getVapidPublicKey() {\n  _getVapidPublicKey = _asyncToGenerator(function* () {\n    if (!isBrowser) return null;\n    try {\n      var response = yield apiRequest('GET', '/api/notifications/vapid-public-key');\n      if (!response.ok) return null;\n      var data = yield response.json();\n      return data.publicKey;\n    } catch (error) {\n      console.error('Error getting VAPID public key:', error);\n      return null;\n    }\n  });\n  return _getVapidPublicKey.apply(this, arguments);\n}\nexport function subscribeForWebPush() {\n  return _subscribeForWebPush.apply(this, arguments);\n}\nfunction _subscribeForWebPush() {\n  _subscribeForWebPush = _asyncToGenerator(function* () {\n    if (!isBrowser || !('serviceWorker' in navigator) || !('PushManager' in window)) {\n      return false;\n    }\n    try {\n      var publicKey = yield getVapidPublicKey();\n      if (!publicKey) return false;\n      var registration = yield navigator.serviceWorker.ready;\n      var subscription = yield registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: publicKey\n      });\n      var response = yield apiRequest('POST', '/api/notifications/subscribe', JSON.parse(JSON.stringify(subscription)));\n      return response.ok;\n    } catch (error) {\n      console.error('Error subscribing to web push:', error);\n      return false;\n    }\n  });\n  return _subscribeForWebPush.apply(this, arguments);\n}\nexport function unsubscribeFromWebPush() {\n  return _unsubscribeFromWebPush.apply(this, arguments);\n}\nfunction _unsubscribeFromWebPush() {\n  _unsubscribeFromWebPush = _asyncToGenerator(function* () {\n    if (!isBrowser || !('serviceWorker' in navigator)) {\n      return false;\n    }\n    try {\n      var registration = yield navigator.serviceWorker.ready;\n      var subscription = yield registration.pushManager.getSubscription();\n      if (!subscription) return true;\n      var response = yield apiRequest('POST', '/api/notifications/unsubscribe', JSON.parse(JSON.stringify(subscription)));\n      yield subscription.unsubscribe();\n      return response.ok;\n    } catch (error) {\n      console.error('Error unsubscribing from web push:', error);\n      return false;\n    }\n  });\n  return _unsubscribeFromWebPush.apply(this, arguments);\n}","map":{"version":3,"names":["apiRequest","isBrowser","Platform","OS","requestNotificationPermission","_requestNotificationPermission","apply","arguments","_asyncToGenerator","window","console","log","permission","Notification","requestPermission","error","registerPushToken","_x","_registerPushToken","token","deviceType","tokenRegistration","response","ok","unregisterPushToken","_x2","_unregisterPushToken","getVapidPublicKey","_getVapidPublicKey","data","json","publicKey","subscribeForWebPush","_subscribeForWebPush","navigator","registration","serviceWorker","ready","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","JSON","parse","stringify","unsubscribeFromWebPush","_unsubscribeFromWebPush","getSubscription","unsubscribe"],"sources":["/home/runner/workspace/mobile/src/services/notificationService.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { PushTokenRegistration } from '../shared/schema';\nimport { apiRequest } from '../api/queryClient';\n\n// Check if we're in a browser environment\nconst isBrowser = Platform.OS === 'web';\n\n// Mock implementation for testing\nexport async function requestNotificationPermission(): Promise<boolean> {\n  if (isBrowser) {\n    // Browser implementation using web push\n    if (!('Notification' in window)) {\n      console.log('This browser does not support notifications');\n      return false;\n    }\n\n    try {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return false;\n    }\n  } else {\n    // Mobile implementation would use Expo Notifications\n    // This is a placeholder - would need to implement with actual Expo Notifications\n    console.log('Mobile notification permissions would be requested here');\n    return true;\n  }\n}\n\nexport async function registerPushToken(token: string): Promise<boolean> {\n  try {\n    const deviceType = isBrowser ? 'web' : Platform.OS === 'ios' ? 'ios' : 'android';\n    \n    const tokenRegistration: PushTokenRegistration = {\n      token,\n      deviceType: deviceType as 'ios' | 'android' | 'web',\n    };\n    \n    const response = await apiRequest('POST', '/api/notifications/register-token', tokenRegistration);\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Error registering push token:', error);\n    return false;\n  }\n}\n\nexport async function unregisterPushToken(token: string): Promise<boolean> {\n  try {\n    const response = await apiRequest('POST', '/api/notifications/unregister-token', { token });\n    return response.ok;\n  } catch (error) {\n    console.error('Error unregistering push token:', error);\n    return false;\n  }\n}\n\n// Function to get VAPID public key for web push\nexport async function getVapidPublicKey(): Promise<string | null> {\n  if (!isBrowser) return null;\n  \n  try {\n    const response = await apiRequest('GET', '/api/notifications/vapid-public-key');\n    if (!response.ok) return null;\n    \n    const data = await response.json();\n    return data.publicKey;\n  } catch (error) {\n    console.error('Error getting VAPID public key:', error);\n    return null;\n  }\n}\n\n// Subscribe for web push notifications\nexport async function subscribeForWebPush(): Promise<boolean> {\n  if (!isBrowser || !('serviceWorker' in navigator) || !('PushManager' in window)) {\n    return false;\n  }\n  \n  try {\n    const publicKey = await getVapidPublicKey();\n    if (!publicKey) return false;\n    \n    const registration = await navigator.serviceWorker.ready;\n    const subscription = await registration.pushManager.subscribe({\n      userVisibleOnly: true,\n      applicationServerKey: publicKey\n    });\n    \n    // Send the subscription to the server\n    const response = await apiRequest(\n      'POST', \n      '/api/notifications/subscribe',\n      JSON.parse(JSON.stringify(subscription))\n    );\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Error subscribing to web push:', error);\n    return false;\n  }\n}\n\n// Unsubscribe from web push notifications\nexport async function unsubscribeFromWebPush(): Promise<boolean> {\n  if (!isBrowser || !('serviceWorker' in navigator)) {\n    return false;\n  }\n  \n  try {\n    const registration = await navigator.serviceWorker.ready;\n    const subscription = await registration.pushManager.getSubscription();\n    \n    if (!subscription) return true;\n    \n    // Send unsubscribe request to server\n    const response = await apiRequest(\n      'POST', \n      '/api/notifications/unsubscribe',\n      JSON.parse(JSON.stringify(subscription))\n    );\n    \n    // Unsubscribe on client side\n    await subscription.unsubscribe();\n    \n    return response.ok;\n  } catch (error) {\n    console.error('Error unsubscribing from web push:', error);\n    return false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}